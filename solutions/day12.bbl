Program evalFile: "../utils/aoc.bbl".
Program evalFile: "../utils/priority_queue.bbl".

struct ElevationMap points start end.
impl ElevationMap {
    /// Parses a 2D map string into a map instance.
    static func parse: str {
        start = null.
        end = null.

        points = str split: "\n" $ withIndex map: ![ | #{ y. line }|
            line chars withIndex map: ![ | #{ x. c } |
                // Handle start and end specially, mapping them to elevations and storing points
                c equals: "S" $ ifTrue: [
                    c = "a".
                    start = #{ x. y }.
                ].
                c equals: "E" $ ifTrue: [
                    c = "z".
                    end = #{ x. y }.
                ].

                c toAsciiCode - "a" toAsciiCode + 1
            ]
        ].

        self points: points start: start end: end
    }

    func width { self points first length }
    func height { self points length }

    /// For each point, create an array of the points where it's possible to move here from that
    /// point.
    func possibleMoveMap {
        // Y, then X, gives an array of points you can move to
        arr = self new2DArrayFrom: [ #{} ].

        // For each point...
        self width times: [ |x|
            self height times: [ |y|
                myElev = self elevation: #{ x. y }.

                // Get all adjacent points
                adjs = self pointsAdjacentTo: #{ x. y }.
                
                // Filter to the ones whose elevation means we can move here from there
                adjs = adjs filter: [ |adj|
                    fromElev = self elevation: adj.

                    // Either it's less than or equal to, or exactly one greater
                    (myElev lessThanOrEquals: fromElev) or: (myElev equals: (fromElev + 1))
                ].

                // Add to result
                arr get: y $ set: x value: adjs.
            ]
        ].
        
        arr
    }

    /// Given a point, gives a list of the valid points which are adjacent to it.
    func pointsAdjacentTo: point {
        adjs = #{}.
        point first equals: 0                 $ ifFalse: [ adjs append: #{ point first - 1. point last     } ].
        point first equals: (self width  - 1) $ ifFalse: [ adjs append: #{ point first + 1. point last     } ].
        point last  equals: 0                 $ ifFalse: [ adjs append: #{ point first.     point last - 1 } ].
        point last  equals: (self height - 1) $ ifFalse: [ adjs append: #{ point first.     point last + 1 } ].
        adjs
    }

    /// Gets the elevation for an #{ x. y } point.
    func elevation: point {
        self points get: point last $ get: point first
    }

    /// Constructs a 2D array whose width and height matches this map, obtaining values by executing
    /// the given function.
    func new2DArrayFrom: fn {
        Array newFrom: [ Array newFrom: fn length: self width ] length: self height
    }

    /// Returns a map of the shortest path from each point to the end.
    func shortestPaths {
        moveMap = self possibleMoveMap.

        dist = self new2DArrayFrom: [ 10000000 ].
        seen = self new2DArrayFrom: [ false ].
        queue = PriorityQueue new.

        // Start from the end and search outwards
        seen get: self end last $ set: self end first value: true.
        queue insert: (PriorityBox value: self end priority: 0).

        [ queue length greaterThan: 0 ] whileTrue: [
            // Set the distance to the new best distance
            current = queue pop.
            oldBestDist = dist get: current value last $ get: current value first.
            dist get: current value last $ set: current value first value: #{ current priority. oldBestDist } min.

            // For each point this could be reached from...
            moveMap get: current value last $ get: current value first $ forEach: [ |adj|
                // Have we seen this value before?
                seenAdj = seen get: adj last $ get: adj first.

                // If not, mark it as seen and add it to the queue
                seenAdj ifFalse: [
                    seen get: adj last $ set: adj first value: true.
                    queue insert: (PriorityBox value: adj priority: current priority + 1).
                ].
            ]
        ].

        dist
    }
}

struct Day12.
impl Day12 {
    static func map {
        ElevationMap parse: (AOC readInput: 12)
    }

    static func part1 {
        map = self map.
        map shortestPaths get: map start last $ get: map start first
    }

    static func part2 {
        map = self map.
        dists = map shortestPaths.

        distsFromA = #{}.
        map width times: [ |x|
            map height times: [ |y|
                map points get: y $ get: x $ equals: 1 $ ifTrue: [
                    distsFromA append: (dists get: y $ get: x).
                ]
            ].
        ]. 

        distsFromA min
    }
}

Console println: Day12 part1.
Console println: Day12 part2.
