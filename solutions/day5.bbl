Program evalFile: "../utils/aoc.bbl".

struct Move qty from to.
impl Move {
    static func parse: line {
        // Split on spaces and get the indexes
        //      1      3    5
        //      v      v    v
        // move Q from F to T
        parts = line split: " ".

        // Adjust for zero-indexed-ness now
        self
            qty: (parts get: 1 $ toInteger)
            from: (parts get: 3 $ toInteger) - 1
            to: (parts get: 5 $ toInteger) - 1
    }
}

struct CargoState stacks moves.
impl CargoState {
    static func parse: input {
        // Break into a two-length array of arrays of lines
        sections = input split: "\n\n" $ map: [ |s| s split: "\n" ].

        stacks = self parseStacks: sections first.
        moves = self parseMoves: sections last.

        self stacks: stacks moves: moves.
    }

    private static func parseStacks: input {
        // Look at the last line to determine how many stacks there are
        numStacks = input last strip split: "   " $ length.

        // Build an array of stacks
        stacks = #{}.
        numStacks times: [ stacks append: #{} ].

        // Then, for each line from the end (excluding the index one), insert an item if there is
        // one
        input reverse skip: 1 $ forEach: [ |line|
            // The lines look like this (without quotes):
            // "[N] [J] [M] [L] [P] [C] [H] [Z] [R]"
            // So the item in the nth stack is the ((n * 4) + 1)th character in the string
            numStacks times: [ |i|
                item = line charAt: ((i * 4) + 1).
                item isWhitespace ifFalse: [
                    stacks get: i $ append: item.
                ]
            ].
        ].

        stacks
    }

    private static func parseMoves: input {
        input map: [ |line| Move parse: line ]
    }

    func executeMove9000: move {
        move qty times: [ |i|
            item = self stacks get: move from $ pop.
            self stacks get: move to $ append: item.
        ]
    }

    func executeMove9001: move {
        heldItems = #{}.

        move qty times: [ |i|
            item = self stacks get: move from $ pop.
            heldItems append: item.
        ]

        self stacks get: move to $ appendAll: heldItems reverse.
    }
}

struct Day5.
impl Day5 {
    private static func state {
        CargoState parse: (AOC readInput: 5)
    }

    static func part: num {
        state = self state.
        state moves forEach: [ |move|
            num equals: 1 $
                ifTrue: [ state executeMove9000: move ]
                else:   [ state executeMove9001: move ]
        ].

        state stacks map: &last $ join.
    }

    static func part1 { self part: 1 }
    static func part2 { self part: 2 }
}

Console println: (Day5 part1).
Console println: (Day5 part2).
