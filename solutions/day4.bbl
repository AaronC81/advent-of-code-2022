Program evalFile: "../utils/aoc.bbl".

/// A pair of ranges which a pair of elves have been assigned to clean.
struct AssigmentPair one two.
impl AssigmentPair {
    /// Parses a line of input into a new pair.
    static func parse: line {
        ranges = line split: "," $ map: [ |p|
            range = p split: "-" $ map: &toInteger.
            // Our ranges are exclusive-end, so add one to the end in the file
            Range start: (range first) end: (range last + 1)
        ].
        self one: (ranges first) two: (ranges last)
    }

    /// Returns true if one range is completely encapsulated by the other.
    func containing {
        (self one contains: self two) or: (self two contains: self one)
    }

    /// Returns true if the two ranges overlap at all.
    func overlapping {
        // Convert our exclusive ranges to inclusive ones while we're at it
        #{ self one start. self two start } max lessThanOrEquals: #{ self one end - 1. self two end - 1 } min
    }
}

struct Day4.
impl Day4 {
    /// The `AssignmentPair`s from the input file.
    static func pairs {
        AOC readInput: 4
            $ split: "\n"
            $ map: [ |l| AssigmentPair parse: l ]
    }

    static func day1 {
        self pairs filter: &containing $ length
    }

    static func day2 {
        self pairs filter: &overlapping $ length
    }
}

Console println: Day4 day1.
Console println: Day4 day2.
